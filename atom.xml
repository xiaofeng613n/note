<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>峰&#39;s Harbor</title>
  
  <subtitle>It is never too late to learn.</subtitle>
  <link href="/note.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaofeng613n.github.io/"/>
  <updated>2018-03-25T05:26:40.885Z</updated>
  <id>https://xiaofeng613n.github.io/</id>
  
  <author>
    <name>xiaofeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>flume源码-组件</title>
    <link href="https://xiaofeng613n.github.io/2018/03/25/flume%E7%BB%84%E4%BB%B6/"/>
    <id>https://xiaofeng613n.github.io/2018/03/25/flume组件/</id>
    <published>2018-03-25T05:23:34.000Z</published>
    <updated>2018-03-25T05:26:40.885Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Source-amp-SourceRunner-amp-ChannelProcessor-amp-ChannelSelector"><a href="#Source-amp-SourceRunner-amp-ChannelProcessor-amp-ChannelSelector" class="headerlink" title="Source&amp;SourceRunner&amp;ChannelProcessor&amp;ChannelSelector"></a>Source&amp;SourceRunner&amp;ChannelProcessor&amp;ChannelSelector</h5><p>flume的source分为两种<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public interface PollableSource extends Source    //有process()方法来处理。系统自动调用process()</div><div class="line">public interface EventDrivenSource extends Source //没有process()方法，而是通过start()来执行向channel中发送送数据的操作。</div></pre></td></tr></table></figure></p><p>前面的flume启动过程已经分析过了，在调用AbstractConfigurationProvider.loadSources方法中，会根据配置的Source具体实现接口调用SourceRunner.forSource方法包装成对应的SourceRunner</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public static SourceRunner forSource(Source source) &#123;</div><div class="line">    SourceRunner runner = null;</div><div class="line"></div><div class="line">    if (source instanceof PollableSource) &#123;</div><div class="line">      runner = new PollableSourceRunner();</div><div class="line">      ((PollableSourceRunner) runner).setSource((PollableSource) source);</div><div class="line">    &#125; else if (source instanceof EventDrivenSource) &#123;</div><div class="line">      runner = new EventDrivenSourceRunner();</div><div class="line">      ((EventDrivenSourceRunner) runner).setSource((EventDrivenSource) source);</div><div class="line">    &#125; else &#123;</div><div class="line">      throw new IllegalArgumentException(&quot;No known runner type for source &quot;+ source);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return runner;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class EventDrivenSourceRunner extends SourceRunner &#123;</div><div class="line">  private LifecycleState lifecycleState;</div><div class="line">  ...</div><div class="line">  @Override</div><div class="line">  public void start() &#123;</div><div class="line">    Source source = getSource();</div><div class="line">    ChannelProcessor cp = source.getChannelProcessor();</div><div class="line">    cp.initialize();</div><div class="line">    source.start();</div><div class="line">    lifecycleState = LifecycleState.START;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>EventDrivenSourceRunner的start方法逻辑比较简单：</p><ol><li>初始化ChannelProcessor</li><li>执行source.start()<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public class PollableSourceRunner extends SourceRunner &#123;</div><div class="line"></div><div class="line">  private static final Logger logger = LoggerFactory.getLogger(PollableSourceRunner.class);</div><div class="line"></div><div class="line">  private AtomicBoolean shouldStop;</div><div class="line"></div><div class="line">  private CounterGroup counterGroup;</div><div class="line">  private PollingRunner runner;</div><div class="line">  private Thread runnerThread;</div><div class="line">  private LifecycleState lifecycleState;</div><div class="line"></div><div class="line"> </div><div class="line">  @Override</div><div class="line">  public void start() &#123;</div><div class="line">    PollableSource source = (PollableSource) getSource();</div><div class="line">    ChannelProcessor cp = source.getChannelProcessor();</div><div class="line">    cp.initialize();</div><div class="line">    source.start();</div><div class="line"></div><div class="line">    runner = new PollingRunner();</div><div class="line"></div><div class="line">    runner.source = source;</div><div class="line">    runner.counterGroup = counterGroup;</div><div class="line">    runner.shouldStop = shouldStop;</div><div class="line"></div><div class="line">    runnerThread = new Thread(runner);</div><div class="line">    runnerThread.setName(getClass().getSimpleName() + &quot;-&quot; + </div><div class="line">        source.getClass().getSimpleName() + &quot;-&quot; + source.getName());</div><div class="line">    runnerThread.start();</div><div class="line"></div><div class="line">    lifecycleState = LifecycleState.START;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  public static class PollingRunner implements Runnable &#123;</div><div class="line"></div><div class="line">    private PollableSource source;</div><div class="line">    ...</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">      ...</div><div class="line">      while (!shouldStop.get()) &#123;</div><div class="line">        counterGroup.incrementAndGet(&quot;runner.polls&quot;);</div><div class="line">        ...</div><div class="line">        if (source.process().equals(PollableSource.Status.BACKOFF)) &#123; //调用process方法</div><div class="line">            counterGroup.incrementAndGet(&quot;runner.backoffs&quot;);</div><div class="line"></div><div class="line">            Thread.sleep(Math.min(</div><div class="line">                counterGroup.incrementAndGet(&quot;runner.backoffs.consecutive&quot;)</div><div class="line">                * source.getBackOffSleepIncrement(), source.getMaxBackOffSleepInterval()));</div><div class="line">          &#125; else &#123;</div><div class="line">            counterGroup.set(&quot;runner.backoffs.consecutive&quot;, 0L);</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><p>PollableSourceRunner的start</p><ol><li>初始化ChannelProcessor </li><li>启动一个线程runnerThread，循环调用source（PollableSource）的process方法（如果失败等待超时时间之后重试）</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ChannelProcessor</div><div class="line">    MultiplexingChannelSelector  // 可以选择该发往哪些channel</div><div class="line">    ReplicatingChannelSelector // allows the event to be placed in all the channels</div></pre></td></tr></table></figure><h5 id="Sink-amp-SinkRunner-amp-SinkProcessor-amp-SinkSelector"><a href="#Sink-amp-SinkRunner-amp-SinkProcessor-amp-SinkSelector" class="headerlink" title="Sink&amp;SinkRunner&amp;SinkProcessor&amp;SinkSelector"></a>Sink&amp;SinkRunner&amp;SinkProcessor&amp;SinkSelector</h5><p>flume启动分析过了SinkRunner可能对应一个sink也可能对应一个sinkgroup。因为如果配置文件中有sinkgroup则这个sinkgroup对应的sink会组成一个group然后封装为一个sinkRunner，然后不在sinkgroup中的sink会自己成为一个sinkRunner</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SinkRunner</div><div class="line">    SinkProcessor</div><div class="line">        sinks</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">public class SinkRunner implements LifecycleAware &#123;</div><div class="line">  ...</div><div class="line">  private CounterGroup counterGroup;</div><div class="line">  private PollingRunner runner;</div><div class="line">  private Thread runnerThread;</div><div class="line">  private LifecycleState lifecycleState;</div><div class="line"></div><div class="line">  private SinkProcessor policy;</div><div class="line">  ...</div><div class="line">  @Override</div><div class="line">  public void start() &#123;</div><div class="line">    SinkProcessor policy = getPolicy();</div><div class="line"></div><div class="line">    policy.start();</div><div class="line"></div><div class="line">    runner = new PollingRunner();</div><div class="line"></div><div class="line">    runner.policy = policy;</div><div class="line">    runner.counterGroup = counterGroup;</div><div class="line">    runner.shouldStop = new AtomicBoolean();</div><div class="line"></div><div class="line">    runnerThread = new Thread(runner);</div><div class="line">    runnerThread.setName(&quot;SinkRunner-PollingRunner-&quot; +</div><div class="line">        policy.getClass().getSimpleName());</div><div class="line">    runnerThread.start();</div><div class="line"></div><div class="line">    lifecycleState = LifecycleState.START;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line"></div><div class="line">  public static class PollingRunner implements Runnable &#123;</div><div class="line">    ...</div><div class="line">    private SinkProcessor policy;</div><div class="line">    private AtomicBoolean shouldStop;</div><div class="line">    private CounterGroup counterGroup;</div><div class="line">    ...</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">      ...</div><div class="line">      while (!shouldStop.get()) &#123;</div><div class="line">        if (policy.process().equals(Sink.Status.BACKOFF)) &#123;</div><div class="line">            counterGroup.incrementAndGet(&quot;runner.backoffs&quot;);</div><div class="line">            Thread.sleep(Math.min(</div><div class="line">                counterGroup.incrementAndGet(&quot;runner.backoffs.consecutive&quot;)</div><div class="line">                * backoffSleepIncrement, maxBackoffSleep));</div><div class="line">        &#125; else &#123;</div><div class="line">            counterGroup.set(&quot;runner.backoffs.consecutive&quot;, 0L);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      ...</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>SinkRunner的start方法逻辑和PollableSourceRunner.start类似：</p><ol><li>调用SinkProcessor的start方法</li><li>启动一个线程runnerThread去轮询SinkProcessor的process方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSinkProcessor</span> <span class="keyword">implements</span> <span class="title">SinkProcessor</span>, <span class="title">ConfigurableComponent</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> Sink sink;</div><div class="line">  <span class="keyword">private</span> LifecycleState lifecycleState;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</div><div class="line">    Preconditions.checkNotNull(sink, <span class="string">"DefaultSinkProcessor sink not set"</span>);</div><div class="line">    sink.start();</div><div class="line">    lifecycleState = LifecycleState.START;</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Status <span class="title">process</span><span class="params">()</span> <span class="keyword">throws</span> EventDeliveryException </span>&#123;</div><div class="line">    <span class="keyword">return</span> sink.process();</div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>没有sinkgroup的情况对应DefaultSinkProcessor，DefaultSinkProcessor的process直接调用sink.process<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">DefaultSinkProcessor</div><div class="line">LoadBalancingSinkProcessor</div><div class="line">    RoundRobinSinkSelector </div><div class="line">    RandomOrderSinkSelector</div><div class="line">FailoverSinkProcessor</div></pre></td></tr></table></figure></p><h5 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h5><p>…</p>]]></content>
    
    <summary type="html">
    
      Source&amp;SourceRunner&amp;ChannelProcessor&amp;ChannelSelector
flume的source分为两种
12

public interface PollableSource extends Source    //有process()方法来处理。系统自动调用process()public interface EventDrivenSource extends Source //没有process()方法，而是通过start()来执行向channel中发送送数据的操作。



前面的flume启动过程已经分析过了，在调用AbstractConfigurati
    
    </summary>
    
      <category term="java" scheme="https://xiaofeng613n.github.io/categories/java/"/>
    
    
      <category term="flume-ng" scheme="https://xiaofeng613n.github.io/tags/flume-ng/"/>
    
  </entry>
  
  <entry>
    <title>flume源码-启动</title>
    <link href="https://xiaofeng613n.github.io/2018/03/23/flume%E5%90%AF%E5%8A%A8/"/>
    <id>https://xiaofeng613n.github.io/2018/03/23/flume启动/</id>
    <published>2018-03-23T13:21:40.000Z</published>
    <updated>2018-03-25T05:26:30.502Z</updated>
    
    <content type="html"><![CDATA[<p>flume的启动是从Application.main开始的，这里先忽略flume配置文件的加载读取（假设已经读取配置），从最简单的启动方式来看一下flume的启动流程</p><p>Application.java 31行<br>application.handleConfigurationEvent(configurationProvider.getConfiguration());</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">AbstractConfigurationProvider：</div><div class="line"><span class="function"><span class="keyword">public</span> MaterializedConfiguration <span class="title">getConfiguration</span><span class="params">()</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    loadChannels(agentConf, channelComponentMap);</div><div class="line">    loadSources(agentConf, channelComponentMap, sourceRunnerMap);</div><div class="line">    loadSinks(agentConf, channelComponentMap, sinkRunnerMap);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>getConfiguration这个方法的主要功能是物化配置</p><p>接下来分别分析下这三个加载方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">AbstractConfigurationProvider:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadChannels</span><span class="params">(AgentConfiguration agentConf, Map&lt;String, ChannelComponent&gt; channelComponentMap)</span> <span class="keyword">throws</span> InstantiationException</span>&#123;</div><div class="line">    ...</div><div class="line">    Channel channel = getOrCreateChannel(...);</div><div class="line">    channelComponentMap.put(chName, <span class="keyword">new</span> ChannelComponent(channel));</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>channel生成后，使用了一个ChannelComponent对象来包装它<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">AbstractConfigurationProvider:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadSources</span><span class="params">(AgentConfiguration agentConf, Map&lt;String, ChannelComponent&gt; channelComponentMap, Map&lt;String, SourceRunner&gt; sourceRunnerMap)</span> <span class="keyword">throws</span> InstantiationException </span>&#123;</div><div class="line">    ...</div><div class="line">    Source source = sourceFactory.create(...)</div><div class="line">    ChannelSelector selector = ChannelSelectorFactory.create(sourceChannels, selectorConfig);</div><div class="line">    ChannelProcessor channelProcessor = <span class="keyword">new</span> ChannelProcessor(selector);</div><div class="line">    source.setChannelProcessor(channelProcessor);</div><div class="line">    sourceRunnerMap.put(sourceName, SourceRunner.forSource(source));</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>SourceRunner结构：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SourceRunner    </div><div class="line">    Source</div><div class="line">        ChannelProcessor</div><div class="line">            ChannelSelector</div><div class="line">                channels    </div><div class="line">        InterceptorChain</div></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">AbstractConfigurationProvider:</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadSinks</span><span class="params">(AgentConfiguration agentConf, Map&lt;String, ChannelComponent&gt; channelComponentMap, Map&lt;String, SinkRunner&gt; sinkRunnerMap)</span> <span class="keyword">throws</span> InstantiationException </span>&#123;</div><div class="line">    ...</div><div class="line">    Sink sink = sinkFactory.create(...)</div><div class="line">    sink.setChannel(channelComponent.channel);</div><div class="line">    sinks.put(sinkName, sink);</div><div class="line">    loadSinkGroups(agentConf, sinks, sinkRunnerMap);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadSinkGroups</span><span class="params">(AgentConfiguration agentConf, Map&lt;String, Sink&gt; sinks, Map&lt;String, SinkRunner&gt; sinkRunnerMap)</span> <span class="keyword">throws</span> InstantiationException </span>&#123;</div><div class="line">    ...</div><div class="line">    SinkGroup group = <span class="keyword">new</span> SinkGroup(groupSinks);</div><div class="line">    sinkRunnerMap.put(comp.getComponentName(),<span class="keyword">new</span> SinkRunner(group.getProcessor()));</div><div class="line">    ...</div><div class="line">    </div><div class="line">    ...</div><div class="line">    SinkProcessor pr = <span class="keyword">new</span> DefaultSinkProcessor();</div><div class="line">    List&lt;Sink&gt; sinkMap = <span class="keyword">new</span> ArrayList&lt;Sink&gt;();</div><div class="line">    sinkMap.add(entry.getValue());</div><div class="line">    pr.setSinks(sinkMap);</div><div class="line">    Configurables.configure(pr, <span class="keyword">new</span> Context());</div><div class="line">    sinkRunnerMap.put(entry.getKey(), <span class="keyword">new</span> SinkRunner(pr));</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>SinkRunner结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">SinkGroup</div><div class="line">    sinks</div><div class="line">    SinkProcessor</div><div class="line">SinkRunner</div><div class="line">    SinkProcessor</div><div class="line">        SinkSelector</div><div class="line">        sinks</div></pre></td></tr></table></figure><p>SinkRunner可能对应一个sink也可能对应一个sinkgroup。因为如果配置文件中有sinkgroup则这个sinkgroup对应的sink会组成一个group然后封装为一个sinkRunner，然后不在sinkgroup中的sink会自己成为一个sinkRunner</p><p>物化配置完成后，启动容器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">handleConfigurationEvent</span><span class="params">(MaterializedConfiguration conf)</span> </span>&#123;</div><div class="line">    stopAllComponents();</div><div class="line">    startAllComponents(conf);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startAllComponents</span><span class="params">(MaterializedConfiguration materializedConfiguration)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">for</span> (Entry&lt;String, Channel&gt; entry : materializedConfiguration.getChannels().entrySet()) &#123;</div><div class="line">        ...</div><div class="line">        supervisor.supervise(entry.getValue(), <span class="keyword">new</span> SupervisorPolicy.AlwaysRestartPolicy(), LifecycleState.START);</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">     <span class="comment">/*</span></div><div class="line"><span class="comment">     * Wait for all channels to start.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    ...</div><div class="line">    <span class="keyword">for</span> (Entry&lt;String, SinkRunner&gt; entry : materializedConfiguration.getSinkRunners().entrySet()) &#123;</div><div class="line">        ...</div><div class="line">        supervisor.supervise(entry.getValue(), <span class="keyword">new</span> SupervisorPolicy.AlwaysRestartPolicy(), LifecycleState.START);</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (Entry&lt;String, SourceRunner&gt; entry : materializedConfiguration.getSourceRunners().entrySet()) &#123;</div><div class="line">        ...</div><div class="line">        supervisor.supervise(entry.getValue(), <span class="keyword">new</span> SupervisorPolicy.AlwaysRestartPolicy(), LifecycleState.START);</div><div class="line">    ...</div><div class="line">    &#125;</div><div class="line">    ...   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>stopAllComponents()方法会依次stop各个组件的运行，顺序是：source、sink、channel。之所以有顺序是因为：一、source是不停的读数据放入channel的；二、sink是不停的从channel拿数据的，channel两头都在使用应该最后停止，停止向channel发送数据后sink停止才不会丢数据。stop是通过supervisor.unsupervise方法来完成的。<br>startAllComponents(conf)是启动各个组件的，顺序正好和stopAllComponents()停止顺序相反<br>在startAllComponents中可以看到3个主要的循环都执行supervisor.supervise(…)<br>这是在向LifecycleSupervisor中注册Supervisee（LifecycleAware ）<br>启动channel组件后需要等待一定时间，是为了让所有channel全部启动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">supervise</span><span class="params">(LifecycleAware lifecycleAware, SupervisorPolicy policy, LifecycleState desiredState)</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    Supervisoree process = <span class="keyword">new</span> Supervisoree();</div><div class="line">    process.status = <span class="keyword">new</span> Status();</div><div class="line">    process.policy = policy;</div><div class="line">    process.status.desiredState = desiredState;</div><div class="line">    process.status.error = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">    MonitorRunnable monitorRunnable = <span class="keyword">new</span> MonitorRunnable();</div><div class="line">    monitorRunnable.lifecycleAware = lifecycleAware;</div><div class="line">    monitorRunnable.supervisoree = process;</div><div class="line">    monitorRunnable.monitorService = monitorService;</div><div class="line"></div><div class="line">    supervisedProcesses.put(lifecycleAware, process);</div><div class="line"></div><div class="line">    ScheduledFuture&lt;?&gt; future = monitorService.scheduleWithFixedDelay(monitorRunnable, <span class="number">0</span>, <span class="number">3</span>, TimeUnit.SECONDS);</div><div class="line">    monitorFutures.put(lifecycleAware, future);</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>monitorService定时执行MonitorRunnable，这个Runnable实现主要的逻辑就是，如果lifecycleAware的状态（supervisoree.status.desiredState）不是期望的状态就执行lifecycleAware的start或者stop方法</p><p>（MonitorRunnable保存的lifecycleAware就是前面加载的Channel，SourceRunner,SinkRunner）</p>]]></content>
    
    <summary type="html">
    
      flume的启动是从Application.main开始的，这里先忽略flume配置文件的加载读取（假设已经读取配置），从最简单的启动方式来看一下flume的启动流程

Application.java 31行
application.handleConfigurationEvent(configurationProvider.getConfiguration());

12345678

AbstractConfigurationProvider：public MaterializedConfiguration getConfiguration() {    ...    loadChann
    
    </summary>
    
      <category term="java" scheme="https://xiaofeng613n.github.io/categories/java/"/>
    
    
      <category term="flume-ng" scheme="https://xiaofeng613n.github.io/tags/flume-ng/"/>
    
  </entry>
  
  <entry>
    <title>HBase配置</title>
    <link href="https://xiaofeng613n.github.io/2018/01/14/HBase%E9%85%8D%E7%BD%AE/"/>
    <id>https://xiaofeng613n.github.io/2018/01/14/HBase配置/</id>
    <published>2018-01-13T16:32:20.000Z</published>
    <updated>2018-01-13T17:10:13.063Z</updated>
    
    <content type="html"><![CDATA[<p><strong>环境</strong><br>linux:centos7<br>java:1.8</p><p>SSH设置和密钥生成<br>SSH设置需要在集群上执行不同的操作，如启动，停止和分布式守护shell操作。进行身份验证不同的Hadoop用户，需要一种用于Hadoop的用户提供的公钥/私钥对，并用不同的用户共享。<br>以下的命令被用于生成使用SSH密钥值对。复制公钥从id_rsa.pub为authorized_keys，并提供所有者，读写权限到authorized_keys文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># ssh-keygen -t rsa</div><div class="line"># cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</div><div class="line"># chmod 0600 ~/.ssh/</div><div class="line">//验证</div><div class="line"># ssh localhost</div></pre></td></tr></table></figure><h5 id="伪分布式模式"><a href="#伪分布式模式" class="headerlink" title="伪分布式模式"></a>伪分布式模式</h5><h6 id="下载Hbase"><a href="#下载Hbase" class="headerlink" title="下载Hbase"></a>下载Hbase</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># wget http://mirrors.sonic.net/apache/hbase/1.4.0/hbase-1.4.0-bin.tar.gz</div><div class="line"># tar -zxvf hbase-1.4.0-bin.tar.gz</div></pre></td></tr></table></figure><h6 id="配置-HBASE-HOME-conf-hbase-env-sh"><a href="#配置-HBASE-HOME-conf-hbase-env-sh" class="headerlink" title="配置 $HBASE_HOME/conf/hbase-env.sh"></a>配置 $HBASE_HOME/conf/hbase-env.sh</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/java/jdk1.8.0_144/</div><div class="line">export HBASE_MANAGES_ZK=true</div></pre></td></tr></table></figure><h6 id="配置-HBASE-HOME-conf-hbase-site-xml（这里hbase-rootdir使用的是文件系统，非hdfs）"><a href="#配置-HBASE-HOME-conf-hbase-site-xml（这里hbase-rootdir使用的是文件系统，非hdfs）" class="headerlink" title="配置 $HBASE_HOME/conf/hbase-site.xml（这里hbase.rootdir使用的是文件系统，非hdfs）"></a>配置 $HBASE_HOME/conf/hbase-site.xml（这里hbase.rootdir使用的是文件系统，非hdfs）</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;property&gt;</div><div class="line">    &lt;name&gt;hbase.rootdir&lt;/name&gt;</div><div class="line">    &lt;value&gt;file:/usr/local/soft/hbase-1.4.0/h-data&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">    &lt;name&gt;hbase.master.port&lt;/name&gt;</div><div class="line">    &lt;value&gt;16000&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">    &lt;name&gt;hbase.master.info.port&lt;/name&gt;</div><div class="line">    &lt;value&gt;16010&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">    &lt;name&gt;hbase.regionserver.port&lt;/name&gt;</div><div class="line">    &lt;value&gt;16201&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">    &lt;name&gt;hbase.regionserver.info.port&lt;/name&gt;</div><div class="line">    &lt;value&gt;16301&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div><div class="line">&lt;property&gt;</div><div class="line">    &lt;name&gt;hbase.cluster.distributed&lt;/name&gt;</div><div class="line">    &lt;value&gt;true&lt;/value&gt;</div><div class="line">&lt;/property&gt;</div></pre></td></tr></table></figure><h6 id="启动与停止"><a href="#启动与停止" class="headerlink" title="启动与停止"></a>启动与停止</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># cd $HBASE_HOME/bin </div><div class="line"># sh start-hbase.sh</div><div class="line"># sh stop-hbase.sh</div><div class="line">// 启动后可以使用jps命令看到如下进程</div><div class="line"># jps</div><div class="line">27442 HQuorumPeer</div><div class="line">27668 Jps</div><div class="line">27509 HMaster</div><div class="line">27593 HRegionServer</div></pre></td></tr></table></figure><h6 id="hbase的web页面（机器的域名是linu1）"><a href="#hbase的web页面（机器的域名是linu1）" class="headerlink" title="hbase的web页面（机器的域名是linu1）"></a>hbase的web页面（机器的域名是linu1）</h6><p><a href="http://linux1:16010/master-status" target="_blank" rel="external">http://linux1:16010/master-status</a></p><p><strong>注意</strong><br>windows环境下用java api 连接hbase可能碰到的问题：</p><ol><li>window配置host：<br>ip linux1 </li><li>linux配置host(是的，linux也要配置，应为我们启动的是伪分布式集群):<br>ip linux1</li><li>winutils.exe</li></ol>]]></content>
    
    <summary type="html">
    
      HBase伪集群模式配置与注意事项
    
    </summary>
    
      <category term="大数据" scheme="https://xiaofeng613n.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="hbase" scheme="https://xiaofeng613n.github.io/tags/hbase/"/>
    
  </entry>
  
  <entry>
    <title>flume配置</title>
    <link href="https://xiaofeng613n.github.io/2017/10/15/flume%E9%85%8D%E7%BD%AE/"/>
    <id>https://xiaofeng613n.github.io/2017/10/15/flume配置/</id>
    <published>2017-10-15T13:35:49.000Z</published>
    <updated>2018-01-13T17:28:31.179Z</updated>
    
    <content type="html"><![CDATA[<p><strong>环境</strong><br>linux:centos7<br>flume:1.7<br>kafka:kafka_2.10-0.10.1.0(已安装好，<a href="http://" target="_blank" rel="external">kafka安装</a>)</p><h6 id="1-下载flume，解压"><a href="#1-下载flume，解压" class="headerlink" title="1.下载flume，解压"></a>1.下载flume，解压</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># pwd</div><div class="line">/usr/local/soft/apache-flume-1.7.0-bin</div><div class="line"># ls</div><div class="line">bin  CHANGELOG  conf  DEVNOTES  doap_Flume.rdf  docs  lib  LICENSE  NOTICE  README.md  RELEASE-NOTES  tools</div></pre></td></tr></table></figure><h6 id="2-配置"><a href="#2-配置" class="headerlink" title="2.配置"></a>2.配置</h6><p>在conf目录根据模板配置文件flume-conf.properties.template配置agent和collect<br>这里在一台机器上配置了3个agent和1个collect,如下：  </p><p>agent1.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">agent1.sources = s1</div><div class="line">agent1.channels = c1</div><div class="line">agent1.sinks = k1</div><div class="line"></div><div class="line">agent1.sources.s1.type=exec</div><div class="line">agent1.sources.s1.command=tail -F /usr/local/soft/log/a.log</div><div class="line">agent1.sources.s1.channels=c1</div><div class="line">agent1.channels.c1.type=memory</div><div class="line">agent1.channels.c1.capacity=10000</div><div class="line">agent1.channels.c1.transactionCapacity=100</div><div class="line">#设置接收器</div><div class="line">agent1.sinks.k1.channel=c1</div><div class="line">agent1.sinks.k1.type= avro</div><div class="line">agent1.sinks.k1.hostname=192.168.1.108</div><div class="line">agent1.sinks.k1.port=40041</div></pre></td></tr></table></figure></p><p>agent2.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">agent2.sources = s1</div><div class="line">agent2.channels = c1</div><div class="line">agent2.sinks = k1</div><div class="line"></div><div class="line">agent2.sources.s1.type=exec</div><div class="line">agent2.sources.s1.command=tail -F /usr/local/soft/log/b.log</div><div class="line">agent2.sources.s1.channels=c1</div><div class="line">agent2.channels.c1.type=memory</div><div class="line">agent2.channels.c1.capacity=10000</div><div class="line">agent2.channels.c1.transactionCapacity=100</div><div class="line">#设置接收器</div><div class="line">agent2.sinks.k1.channel=c1</div><div class="line">agent2.sinks.k1.type= avro</div><div class="line">agent2.sinks.k1.hostname=192.168.1.108</div><div class="line">agent2.sinks.k1.port=40041</div></pre></td></tr></table></figure></p><p>agent3.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">agent3.sources = s1</div><div class="line">agent3.channels = c1</div><div class="line">agent3.sinks = k1</div><div class="line"></div><div class="line">agent3.sources.s1.type=exec</div><div class="line">agent3.sources.s1.command=tail -F /usr/local/soft/log/c.log</div><div class="line">agent3.sources.s1.channels=c1</div><div class="line">agent3.channels.c1.type=memory</div><div class="line">agent3.channels.c1.capacity=10000</div><div class="line">agent3.channels.c1.transactionCapacity=100</div><div class="line">#设置接收器</div><div class="line">agent3.sinks.k1.channel=c1</div><div class="line">agent3.sinks.k1.type= avro</div><div class="line">agent3.sinks.k1.hostname=192.168.1.108</div><div class="line">agent3.sinks.k1.port=40041</div></pre></td></tr></table></figure></p><p>collect.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">agentx.sources = s1</div><div class="line">agentx.channels = c1</div><div class="line">agentx.sinks = k1</div><div class="line"></div><div class="line">agentx.sources.s1.channels = c1</div><div class="line">agentx.sources.s1.type = avro</div><div class="line">agentx.sources.s1.bind = 192.168.1.108</div><div class="line">agentx.sources.s1.port = 40041</div><div class="line">agentx.sources.s1.threads = 2</div><div class="line"></div><div class="line">agentx.channels.c1.type=memory</div><div class="line">agentx.channels.c1.capacity=10000</div><div class="line">agentx.channels.c1.transactionCapacity=100</div><div class="line"></div><div class="line">#设置kafka接收器</div><div class="line">agentx.sinks.k1.type= org.apache.flume.sink.kafka.KafkaSink</div><div class="line">#设置Kafka的broker地址和端口号</div><div class="line">agentx.sinks.k1.brokerList=192.168.1.108:9093</div><div class="line">#设置Kafka的Topic</div><div class="line">agentx.sinks.k1.topic=topicOfFlume</div><div class="line">#设置序列化方式</div><div class="line">agentx.sinks.k1.serializer.class=kafka.serializer.StringEncoder</div><div class="line"></div><div class="line">agentx.sinks.k1.channel=c1</div></pre></td></tr></table></figure></p><p>可以看出3个agent的配置基本相同，就是sources监听文件不一样</p><h6 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h6><p>（注意：-n 后的参数要和配置文件中的agent名相同）<br>在flume目录下执行如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># bin/flume-ng agent --conf ./conf/ -f conf/collect.properties -Dflume.root.logger=DEBUG,console -n agentx</div><div class="line"># bin/flume-ng agent --conf ./conf/ -f conf/agent1.properties -Dflume.root.logger=DEBUG,console -n agent1</div><div class="line"># bin/flume-ng agent --conf ./conf/ -f conf/agent2.properties -Dflume.root.logger=DEBUG,console -n agent2</div><div class="line"># bin/flume-ng agent --conf ./conf/ -f conf/agent3.properties -Dflume.root.logger=DEBUG,console -n agent3</div></pre></td></tr></table></figure></p><p>启动是否成功可以查看（这是在一台机器上部署的）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># jps | grep App*</div><div class="line">26160 Application</div><div class="line">41320 Application</div><div class="line">26266 Application</div><div class="line">26205 Application</div></pre></td></tr></table></figure></p><h6 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h6><p>手动或脚本向监听的文件添加内容，kafka中会有数据写入,测试消费：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaTest</span></span></div><div class="line"><span class="class"></span>&#123;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">testConsumer();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testConsumer</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line"></div><div class="line">Properties props = <span class="keyword">new</span> Properties();</div><div class="line">props.put(<span class="string">"bootstrap.servers"</span>, <span class="string">"192.168.1.108:9093"</span>);</div><div class="line">props.put(<span class="string">"group.id"</span>, <span class="string">"groupC"</span>);</div><div class="line"><span class="comment">//props.put("enable.auto.commit", "true");</span></div><div class="line"><span class="comment">//props.put("auto.commit.interval.ms", "1000");</span></div><div class="line">props.put(<span class="string">"auto.offset.reset"</span>, <span class="string">"earliest"</span>);</div><div class="line">props.put(<span class="string">"key.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</div><div class="line">props.put(<span class="string">"value.deserializer"</span>, <span class="string">"org.apache.kafka.common.serialization.StringDeserializer"</span>);</div><div class="line">KafkaConsumer&lt;String, String&gt; consumer = <span class="keyword">new</span> KafkaConsumer&lt;&gt;(props);</div><div class="line">consumer.subscribe(Arrays.asList(<span class="string">"topicOfFlume"</span>));</div><div class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)</div><div class="line">&#123;</div><div class="line">ConsumerRecords&lt;String, String&gt; records = consumer.poll(<span class="number">100</span>);</div><div class="line"><span class="keyword">for</span> (ConsumerRecord&lt;String, String&gt; record : records)</div><div class="line">&#123;</div><div class="line">System.out.printf(<span class="string">"offset = %d, key = %s, value = %s%n"</span>, record.offset(), record.key(), record.value());</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      环境
linux:centos7
flume:1.7
kafka:kafka_2.10-0.10.1.0(已安装好，kafka安装)

1.下载flume，解压
1234

# pwd/usr/local/soft/apache-flume-1.7.0-bin# lsbin  CHANGELOG  conf  DEVNOTES  doap_Flume.rdf  docs  lib  LICENSE  NOTICE  README.md  RELEASE-NOTES  tools

2.配置
在conf目录根据模板配置文件flume-conf.properties.template配置agent
    
    </summary>
    
      <category term="java" scheme="https://xiaofeng613n.github.io/categories/java/"/>
    
    
      <category term="flume-ng" scheme="https://xiaofeng613n.github.io/tags/flume-ng/"/>
    
  </entry>
  
  <entry>
    <title>my first post</title>
    <link href="https://xiaofeng613n.github.io/2017/10/03/my-first-post%20-%20%E5%89%AF%E6%9C%AC%20(2)/"/>
    <id>https://xiaofeng613n.github.io/2017/10/03/my-first-post - 副本 (2)/</id>
    <published>2017-10-03T07:31:18.000Z</published>
    <updated>2017-10-03T07:58:26.149Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="spring" scheme="https://xiaofeng613n.github.io/categories/spring/"/>
    
    
      <category term="aop" scheme="https://xiaofeng613n.github.io/tags/aop/"/>
    
      <category term="ioc" scheme="https://xiaofeng613n.github.io/tags/ioc/"/>
    
  </entry>
  
  <entry>
    <title>my first post</title>
    <link href="https://xiaofeng613n.github.io/2017/10/03/my-first-post%20-%20%E5%89%AF%E6%9C%AC%20(3)/"/>
    <id>https://xiaofeng613n.github.io/2017/10/03/my-first-post - 副本 (3)/</id>
    <published>2017-10-03T07:31:18.000Z</published>
    <updated>2017-10-03T07:58:26.149Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="spring" scheme="https://xiaofeng613n.github.io/categories/spring/"/>
    
    
      <category term="aop" scheme="https://xiaofeng613n.github.io/tags/aop/"/>
    
      <category term="ioc" scheme="https://xiaofeng613n.github.io/tags/ioc/"/>
    
  </entry>
  
  <entry>
    <title>my first post</title>
    <link href="https://xiaofeng613n.github.io/2017/10/03/my-first-post%20-%20%E5%89%AF%E6%9C%AC/"/>
    <id>https://xiaofeng613n.github.io/2017/10/03/my-first-post - 副本/</id>
    <published>2017-10-03T07:31:18.000Z</published>
    <updated>2017-10-03T09:40:31.354Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="java" scheme="https://xiaofeng613n.github.io/categories/java/"/>
    
    
      <category term="aop" scheme="https://xiaofeng613n.github.io/tags/aop/"/>
    
      <category term="ioc" scheme="https://xiaofeng613n.github.io/tags/ioc/"/>
    
  </entry>
  
  <entry>
    <title>my first post</title>
    <link href="https://xiaofeng613n.github.io/2017/10/03/my-first-post/"/>
    <id>https://xiaofeng613n.github.io/2017/10/03/my-first-post/</id>
    <published>2017-10-03T07:31:18.000Z</published>
    <updated>2017-10-03T09:40:43.401Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="java" scheme="https://xiaofeng613n.github.io/categories/java/"/>
    
    
      <category term="aop" scheme="https://xiaofeng613n.github.io/tags/aop/"/>
    
      <category term="ioc" scheme="https://xiaofeng613n.github.io/tags/ioc/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://xiaofeng613n.github.io/2017/10/03/hello-world/"/>
    <id>https://xiaofeng613n.github.io/2017/10/03/hello-world/</id>
    <published>2017-10-03T05:05:40.250Z</published>
    <updated>2018-01-13T17:26:32.516Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p><p><strong>使用问题</strong><br>本地默认端口被占用导致无法访问<br>window:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">netstat -aon|findstr &quot;4000&quot;  // 得到占用端口进程的pid</div><div class="line">tasklist|findstr &quot;884&quot; //根据pid查看具体应用</div><div class="line">taskkill /f /t /im FoxitProtect.exe  //结束应用</div></pre></td></tr></table></figure></p><p>linux:<br>netstat -anp | grep 端口号或者netstat-tunlp查找，然后kill即可</p>]]></content>
    
    <summary type="html">
    
      Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.

Quick Start
Create a new post
1

$ hexo new &quot;My New Post&quot;

More info: Writing

Run server
1

$ hexo serv
    
    </summary>
    
    
  </entry>
  
</feed>
